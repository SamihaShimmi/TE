<?xml version='1.0' encoding='utf-8'?>
<unit xmlns="http://www.srcML.org/srcML/src" filename="H:\Research\IndStudyDrRahimi\DataAnalysis\jfreechart-1.5.2\jfreechart-1.5.2\src\main\java\org\jfree\data\time\DateRange.java" language="Java" revision="1.0.0">
  <comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2020, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
 * USA.
 *
 * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. 
 * Other names may be trademarks of their respective owners.]
 *
 * --------------
 * DateRange.java
 * --------------
 * (C) Copyright 2002-2020, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Bill Kelemen;
 *
 */</comment>
  <package>package <name>
      <name>org</name>
      <operator>.</operator>
      <name>jfree</name>
      <operator>.</operator>
      <name>data</name>
      <operator>.</operator>
      <name>time</name>
    </name>;</package>
  <import>import <name>
      <name>java</name>
      <operator>.</operator>
      <name>io</name>
      <operator>.</operator>
      <name>Serializable</name>
    </name>;</import>
  <import>import <name>
      <name>java</name>
      <operator>.</operator>
      <name>text</name>
      <operator>.</operator>
      <name>DateFormat</name>
    </name>;</import>
  <import>import <name>
      <name>java</name>
      <operator>.</operator>
      <name>util</name>
      <operator>.</operator>
      <name>Date</name>
    </name>;</import>
  <import>import <name>
      <name>org</name>
      <operator>.</operator>
      <name>jfree</name>
      <operator>.</operator>
      <name>data</name>
      <operator>.</operator>
      <name>Range</name>
    </name>;</import>
  <comment format="javadoc" type="block">/**
 * A range specified in terms of two {@code java.util.Date} objects.
 * Instances of this class are immutable.
 */</comment>
  <class>
    <specifier>public</specifier> class <name>DateRange</name>
    <super_list>
      <extends>extends <super>
          <name>Range</name>
        </super>
      </extends>
      <implements>implements <super>
          <name>Serializable</name>
        </super>
      </implements>
    </super_list>
    <block>{

    <comment format="javadoc" type="block">/** For serialization. */</comment>
      <decl_stmt>
        <decl>
          <type>
            <specifier>private</specifier>
            <specifier>static</specifier>
            <specifier>final</specifier>
            <name>long</name>
          </type>
          <name>serialVersionUID</name>
          <init>= <expr>
              <operator>-</operator>
              <literal type="number">4705682568375418157L</literal>
            </expr>
          </init>
        </decl>;</decl_stmt>
      <comment format="javadoc" type="block">/** The lower bound for the range. */</comment>
      <decl_stmt>
        <decl>
          <type>
            <specifier>private</specifier>
            <name>long</name>
          </type>
          <name>lowerDate</name>
        </decl>;</decl_stmt>
      <comment format="javadoc" type="block">/** The upper bound for the range. */</comment>
      <decl_stmt>
        <decl>
          <type>
            <specifier>private</specifier>
            <name>long</name>
          </type>
          <name>upperDate</name>
        </decl>;</decl_stmt>
      <comment format="javadoc" type="block">/**
     * Default constructor.
     */</comment>
      <constructor>
        <specifier>public</specifier>
        <name>DateRange</name>
        <parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt>
              <expr>
                <call>
                  <name>this</name>
                  <argument_list>(<argument>
                      <expr>
                        <operator>new</operator>
                        <call>
                          <name>Date</name>
                          <argument_list>(<argument>
                              <expr>
                                <literal type="number">0</literal>
                              </expr>
                            </argument>)</argument_list>
                        </call>
                      </expr>
                    </argument>, <argument>
                      <expr>
                        <operator>new</operator>
                        <call>
                          <name>Date</name>
                          <argument_list>(<argument>
                              <expr>
                                <literal type="number">1</literal>
                              </expr>
                            </argument>)</argument_list>
                        </call>
                      </expr>
                    </argument>)</argument_list>
                </call>
              </expr>;</expr_stmt>
          </block_content>}</block>
      </constructor>
      <comment format="javadoc" type="block">/**
     * Constructs a new range.
     *
     * @param lower  the lower bound ({@code null} not permitted).
     * @param upper  the upper bound ({@code null} not permitted).
     */</comment>
      <constructor>
        <specifier>public</specifier>
        <name>DateRange</name>
        <parameter_list>(<parameter>
            <decl>
              <type>
                <name>Date</name>
              </type>
              <name>lower</name>
            </decl>
          </parameter>, <parameter>
            <decl>
              <type>
                <name>Date</name>
              </type>
              <name>upper</name>
            </decl>
          </parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt>
              <expr>
                <call>
                  <name>super</name>
                  <argument_list>(<argument>
                      <expr>
                        <call>
                          <name>
                            <name>lower</name>
                            <operator>.</operator>
                            <name>getTime</name>
                          </name>
                          <argument_list>()</argument_list>
                        </call>
                      </expr>
                    </argument>, <argument>
                      <expr>
                        <call>
                          <name>
                            <name>upper</name>
                            <operator>.</operator>
                            <name>getTime</name>
                          </name>
                          <argument_list>()</argument_list>
                        </call>
                      </expr>
                    </argument>)</argument_list>
                </call>
              </expr>;</expr_stmt>
            <expr_stmt>
              <expr>
                <name>
                  <name>this</name>
                  <operator>.</operator>
                  <name>lowerDate</name>
                </name>
                <operator>=</operator>
                <call>
                  <name>
                    <name>lower</name>
                    <operator>.</operator>
                    <name>getTime</name>
                  </name>
                  <argument_list>()</argument_list>
                </call>
              </expr>;</expr_stmt>
            <expr_stmt>
              <expr>
                <name>
                  <name>this</name>
                  <operator>.</operator>
                  <name>upperDate</name>
                </name>
                <operator>=</operator>
                <call>
                  <name>
                    <name>upper</name>
                    <operator>.</operator>
                    <name>getTime</name>
                  </name>
                  <argument_list>()</argument_list>
                </call>
              </expr>;</expr_stmt>
          </block_content>}</block>
      </constructor>
      <comment format="javadoc" type="block">/**
     * Constructs a new range using two values that will be interpreted as
     * "milliseconds since midnight GMT, 1-Jan-1970".
     *
     * @param lower  the lower (oldest) date.
     * @param upper  the upper (most recent) date.
     */</comment>
      <constructor>
        <specifier>public</specifier>
        <name>DateRange</name>
        <parameter_list>(<parameter>
            <decl>
              <type>
                <name>double</name>
              </type>
              <name>lower</name>
            </decl>
          </parameter>, <parameter>
            <decl>
              <type>
                <name>double</name>
              </type>
              <name>upper</name>
            </decl>
          </parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt>
              <expr>
                <call>
                  <name>super</name>
                  <argument_list>(<argument>
                      <expr>
                        <name>lower</name>
                      </expr>
                    </argument>, <argument>
                      <expr>
                        <name>upper</name>
                      </expr>
                    </argument>)</argument_list>
                </call>
              </expr>;</expr_stmt>
            <expr_stmt>
              <expr>
                <name>
                  <name>this</name>
                  <operator>.</operator>
                  <name>lowerDate</name>
                </name>
                <operator>=</operator>
                <operator>(</operator>
                <name>long</name>
                <operator>)</operator>
                <name>lower</name>
              </expr>;</expr_stmt>
            <expr_stmt>
              <expr>
                <name>
                  <name>this</name>
                  <operator>.</operator>
                  <name>upperDate</name>
                </name>
                <operator>=</operator>
                <operator>(</operator>
                <name>long</name>
                <operator>)</operator>
                <name>upper</name>
              </expr>;</expr_stmt>
          </block_content>}</block>
      </constructor>
      <comment format="javadoc" type="block">/**
     * Constructs a new range that is based on another {@link Range}.  The
     * other range does not have to be a {@link DateRange}.  If it is not, the
     * upper and lower bounds are evaluated as milliseconds since midnight
     * GMT, 1-Jan-1970.
     *
     * @param other  the other range ({@code null} not permitted).
     */</comment>
      <constructor>
        <specifier>public</specifier>
        <name>DateRange</name>
        <parameter_list>(<parameter>
            <decl>
              <type>
                <name>Range</name>
              </type>
              <name>other</name>
            </decl>
          </parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt>
              <expr>
                <call>
                  <name>this</name>
                  <argument_list>(<argument>
                      <expr>
                        <call>
                          <name>
                            <name>other</name>
                            <operator>.</operator>
                            <name>getLowerBound</name>
                          </name>
                          <argument_list>()</argument_list>
                        </call>
                      </expr>
                    </argument>, <argument>
                      <expr>
                        <call>
                          <name>
                            <name>other</name>
                            <operator>.</operator>
                            <name>getUpperBound</name>
                          </name>
                          <argument_list>()</argument_list>
                        </call>
                      </expr>
                    </argument>)</argument_list>
                </call>
              </expr>;</expr_stmt>
          </block_content>}</block>
      </constructor>
      <comment format="javadoc" type="block">/**
     * Returns the lower (earlier) date for the range.
     *
     * @return The lower date for the range.
     *
     * @see #getLowerMillis()
     */</comment>
      <function>
        <type>
          <specifier>public</specifier>
          <name>Date</name>
        </type>
        <name>getLowerDate</name>
        <parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr>
                <operator>new</operator>
                <call>
                  <name>Date</name>
                  <argument_list>(<argument>
                      <expr>
                        <name>
                          <name>this</name>
                          <operator>.</operator>
                          <name>lowerDate</name>
                        </name>
                      </expr>
                    </argument>)</argument_list>
                </call>
              </expr>;</return>
          </block_content>}</block>
      </function>
      <comment format="javadoc" type="block">/**
     * Returns the lower bound of the range in milliseconds.
     *
     * @return The lower bound.
     *
     * @see #getLowerDate()
     *
     * @since 1.0.11
     */</comment>
      <function>
        <type>
          <specifier>public</specifier>
          <name>long</name>
        </type>
        <name>getLowerMillis</name>
        <parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr>
                <name>
                  <name>this</name>
                  <operator>.</operator>
                  <name>lowerDate</name>
                </name>
              </expr>;</return>
          </block_content>}</block>
      </function>
      <comment format="javadoc" type="block">/**
     * Returns the upper (later) date for the range.
     *
     * @return The upper date for the range.
     *
     * @see #getUpperMillis()
     */</comment>
      <function>
        <type>
          <specifier>public</specifier>
          <name>Date</name>
        </type>
        <name>getUpperDate</name>
        <parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr>
                <operator>new</operator>
                <call>
                  <name>Date</name>
                  <argument_list>(<argument>
                      <expr>
                        <name>
                          <name>this</name>
                          <operator>.</operator>
                          <name>upperDate</name>
                        </name>
                      </expr>
                    </argument>)</argument_list>
                </call>
              </expr>;</return>
          </block_content>}</block>
      </function>
      <comment format="javadoc" type="block">/**
     * Returns the upper bound of the range in milliseconds.
     *
     * @return The upper bound.
     *
     * @see #getUpperDate()
     *
     * @since 1.0.11
     */</comment>
      <function>
        <type>
          <specifier>public</specifier>
          <name>long</name>
        </type>
        <name>getUpperMillis</name>
        <parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr>
                <name>
                  <name>this</name>
                  <operator>.</operator>
                  <name>upperDate</name>
                </name>
              </expr>;</return>
          </block_content>}</block>
      </function>
      <comment format="javadoc" type="block">/**
     * Returns a string representing the date range (useful for debugging).
     *
     * @return A string representing the date range.
     */</comment>
      <function>
        <annotation>@<name>Override</name>
        </annotation>
        <type>
          <specifier>public</specifier>
          <name>String</name>
        </type>
        <name>toString</name>
        <parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt>
              <decl>
                <type>
                  <name>DateFormat</name>
                </type>
                <name>df</name>
                <init>= <expr>
                    <call>
                      <name>
                        <name>DateFormat</name>
                        <operator>.</operator>
                        <name>getDateTimeInstance</name>
                      </name>
                      <argument_list>()</argument_list>
                    </call>
                  </expr>
                </init>
              </decl>;</decl_stmt>
            <return>return <expr>
                <literal type="string">"["</literal>
                <operator>+</operator>
                <call>
                  <name>
                    <name>df</name>
                    <operator>.</operator>
                    <name>format</name>
                  </name>
                  <argument_list>(<argument>
                      <expr>
                        <call>
                          <name>getLowerDate</name>
                          <argument_list>()</argument_list>
                        </call>
                      </expr>
                    </argument>)</argument_list>
                </call>
                <operator>+</operator>
                <literal type="string">" --&gt; "</literal>
                <operator>+</operator>
                <call>
                  <name>
                    <name>df</name>
                    <operator>.</operator>
                    <name>format</name>
                  </name>
                  <argument_list>(<argument>
                      <expr>
                        <call>
                          <name>getUpperDate</name>
                          <argument_list>()</argument_list>
                        </call>
                      </expr>
                    </argument>)</argument_list>
                </call>
                <operator>+</operator>
                <literal type="string">"]"</literal>
              </expr>;</return>
          </block_content>}</block>
      </function>

}</block>
  </class>
</unit>
