<?xml version='1.0' encoding='utf-8'?>
<function>
  <annotation>@<name>Override</name>
  </annotation>
  <type>
    <specifier>public</specifier>
    <name>int</name>
  </type>
  <name>hashCode</name>
  <parameter_list>()</parameter_list>
  <block>{<block_content>
      <decl_stmt>
        <decl>
          <type>
            <name>int</name>
          </type>
          <name>result</name>
          <init>= <expr>
              <call>
                <name>
                  <name>super</name>
                  <operator>.</operator>
                  <name>hashCode</name>
                </name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </init>
        </decl>;</decl_stmt>
      <expr_stmt>
        <expr>
          <name>result</name>
          <operator>=</operator>
          <literal type="number">29</literal>
          <operator>*</operator>
          <name>result</name>
          <operator>+</operator>
          <operator>(</operator>
          <ternary>
            <condition>
              <expr>
                <name>
                  <name>this</name>
                  <operator>.</operator>
                  <name>domain</name>
                </name>
                <operator>!=</operator>
                <literal type="null">null</literal>
              </expr> ?</condition>
            <then>
              <expr>
                <call>
                  <name>
                    <name>this</name>
                    <operator>.</operator>
                    <name>domain</name>
                    <operator>.</operator>
                    <name>hashCode</name>
                  </name>
                  <argument_list>()</argument_list>
                </call>
              </expr>
            </then>
            <else>: <expr>
                <literal type="number">0</literal>
              </expr>
            </else>
          </ternary>
          <operator>)</operator>
        </expr>;</expr_stmt>
      <expr_stmt>
        <expr>
          <name>result</name>
          <operator>=</operator>
          <literal type="number">29</literal>
          <operator>*</operator>
          <name>result</name>
          <operator>+</operator>
          <operator>(</operator>
          <ternary>
            <condition>
              <expr>
                <name>
                  <name>this</name>
                  <operator>.</operator>
                  <name>range</name>
                </name>
                <operator>!=</operator>
                <literal type="null">null</literal>
              </expr> ?</condition>
            <then>
              <expr>
                <call>
                  <name>
                    <name>this</name>
                    <operator>.</operator>
                    <name>range</name>
                    <operator>.</operator>
                    <name>hashCode</name>
                  </name>
                  <argument_list>()</argument_list>
                </call>
              </expr>
            </then>
            <else>: <expr>
                <literal type="number">0</literal>
              </expr>
            </else>
          </ternary>
          <operator>)</operator>
        </expr>;</expr_stmt>
      <expr_stmt>
        <expr>
          <name>result</name>
          <operator>=</operator>
          <literal type="number">29</literal>
          <operator>*</operator>
          <name>result</name>
          <operator>+</operator>
          <operator>(</operator>
          <ternary>
            <condition>
              <expr>
                <name>
                  <name>this</name>
                  <operator>.</operator>
                  <name>timePeriodClass</name>
                </name>
                <operator>!=</operator>
                <literal type="null">null</literal>
              </expr>
                ?</condition>
            <then>
              <expr>
                <call>
                  <name>
                    <name>this</name>
                    <operator>.</operator>
                    <name>timePeriodClass</name>
                    <operator>.</operator>
                    <name>hashCode</name>
                  </name>
                  <argument_list>()</argument_list>
                </call>
              </expr>
            </then>
            <else>: <expr>
                <literal type="number">0</literal>
              </expr>
            </else>
          </ternary>
          <operator>)</operator>
        </expr>;</expr_stmt>
      <comment type="line">// it is too slow to look at every data item, so let's just look at</comment>
      <comment type="line">// the first, middle and last items...</comment>
      <decl_stmt>
        <decl>
          <type>
            <name>int</name>
          </type>
          <name>count</name>
          <init>= <expr>
              <call>
                <name>getItemCount</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </init>
        </decl>;</decl_stmt>
      <if_stmt>
        <if>if <condition>(<expr>
              <name>count</name>
              <operator>&gt;</operator>
              <literal type="number">0</literal>
            </expr>)</condition>
          <block>{<block_content>
              <decl_stmt>
                <decl>
                  <type>
                    <name>TimeSeriesDataItem</name>
                  </type>
                  <name>item</name>
                  <init>= <expr>
                      <call>
                        <name>getRawDataItem</name>
                        <argument_list>(<argument>
                            <expr>
                              <literal type="number">0</literal>
                            </expr>
                          </argument>)</argument_list>
                      </call>
                    </expr>
                  </init>
                </decl>;</decl_stmt>
              <expr_stmt>
                <expr>
                  <name>result</name>
                  <operator>=</operator>
                  <literal type="number">29</literal>
                  <operator>*</operator>
                  <name>result</name>
                  <operator>+</operator>
                  <call>
                    <name>
                      <name>item</name>
                      <operator>.</operator>
                      <name>hashCode</name>
                    </name>
                    <argument_list>()</argument_list>
                  </call>
                </expr>;</expr_stmt>
            </block_content>}</block>
        </if>
      </if_stmt>
      <if_stmt>
        <if>if <condition>(<expr>
              <name>count</name>
              <operator>&gt;</operator>
              <literal type="number">1</literal>
            </expr>)</condition>
          <block>{<block_content>
              <decl_stmt>
                <decl>
                  <type>
                    <name>TimeSeriesDataItem</name>
                  </type>
                  <name>item</name>
                  <init>= <expr>
                      <call>
                        <name>getRawDataItem</name>
                        <argument_list>(<argument>
                            <expr>
                              <name>count</name>
                              <operator>-</operator>
                              <literal type="number">1</literal>
                            </expr>
                          </argument>)</argument_list>
                      </call>
                    </expr>
                  </init>
                </decl>;</decl_stmt>
              <expr_stmt>
                <expr>
                  <name>result</name>
                  <operator>=</operator>
                  <literal type="number">29</literal>
                  <operator>*</operator>
                  <name>result</name>
                  <operator>+</operator>
                  <call>
                    <name>
                      <name>item</name>
                      <operator>.</operator>
                      <name>hashCode</name>
                    </name>
                    <argument_list>()</argument_list>
                  </call>
                </expr>;</expr_stmt>
            </block_content>}</block>
        </if>
      </if_stmt>
      <if_stmt>
        <if>if <condition>(<expr>
              <name>count</name>
              <operator>&gt;</operator>
              <literal type="number">2</literal>
            </expr>)</condition>
          <block>{<block_content>
              <decl_stmt>
                <decl>
                  <type>
                    <name>TimeSeriesDataItem</name>
                  </type>
                  <name>item</name>
                  <init>= <expr>
                      <call>
                        <name>getRawDataItem</name>
                        <argument_list>(<argument>
                            <expr>
                              <name>count</name>
                              <operator>/</operator>
                              <literal type="number">2</literal>
                            </expr>
                          </argument>)</argument_list>
                      </call>
                    </expr>
                  </init>
                </decl>;</decl_stmt>
              <expr_stmt>
                <expr>
                  <name>result</name>
                  <operator>=</operator>
                  <literal type="number">29</literal>
                  <operator>*</operator>
                  <name>result</name>
                  <operator>+</operator>
                  <call>
                    <name>
                      <name>item</name>
                      <operator>.</operator>
                      <name>hashCode</name>
                    </name>
                    <argument_list>()</argument_list>
                  </call>
                </expr>;</expr_stmt>
            </block_content>}</block>
        </if>
      </if_stmt>
      <expr_stmt>
        <expr>
          <name>result</name>
          <operator>=</operator>
          <literal type="number">29</literal>
          <operator>*</operator>
          <name>result</name>
          <operator>+</operator>
          <name>
            <name>this</name>
            <operator>.</operator>
            <name>maximumItemCount</name>
          </name>
        </expr>;</expr_stmt>
      <expr_stmt>
        <expr>
          <name>result</name>
          <operator>=</operator>
          <literal type="number">29</literal>
          <operator>*</operator>
          <name>result</name>
          <operator>+</operator>
          <operator>(</operator>
          <name>int</name>
          <operator>)</operator>
          <name>
            <name>this</name>
            <operator>.</operator>
            <name>maximumItemAge</name>
          </name>
        </expr>;</expr_stmt>
      <return>return <expr>
          <name>result</name>
        </expr>;</return>
    </block_content>}</block>
</function>
