<?xml version='1.0' encoding='utf-8'?>
<function>
  <type>
    <specifier>public</specifier>
    <name>TimeSeriesDataItem</name>
  </type>
  <name>addOrUpdate</name>
  <parameter_list>(<parameter>
      <decl>
        <type>
          <name>TimeSeriesDataItem</name>
        </type>
        <name>item</name>
      </decl>
    </parameter>)</parameter_list>
  <block>{<block_content>
      <expr_stmt>
        <expr>
          <call>
            <name>
              <name>Args</name>
              <operator>.</operator>
              <name>nullNotPermitted</name>
            </name>
            <argument_list>(<argument>
                <expr>
                  <name>item</name>
                </expr>
              </argument>, <argument>
                <expr>
                  <literal type="string">"item"</literal>
                </expr>
              </argument>)</argument_list>
          </call>
        </expr>;</expr_stmt>
      <decl_stmt>
        <decl>
          <type>
            <name>Class</name>
          </type>
          <name>periodClass</name>
          <init>= <expr>
              <call>
                <name>
                  <name>item</name>
                  <operator>.</operator>
                  <name>getPeriod</name>
                </name>
                <argument_list>()</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>getClass</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </init>
        </decl>;</decl_stmt>
      <if_stmt>
        <if>if <condition>(<expr>
              <name>
                <name>this</name>
                <operator>.</operator>
                <name>timePeriodClass</name>
              </name>
              <operator>==</operator>
              <literal type="null">null</literal>
            </expr>)</condition>
          <block>{<block_content>
              <expr_stmt>
                <expr>
                  <name>
                    <name>this</name>
                    <operator>.</operator>
                    <name>timePeriodClass</name>
                  </name>
                  <operator>=</operator>
                  <name>periodClass</name>
                </expr>;</expr_stmt>
            </block_content>}</block>
        </if>
        <if type="elseif">else if <condition>(<expr>
              <operator>!</operator>
              <call>
                <name>
                  <name>this</name>
                  <operator>.</operator>
                  <name>timePeriodClass</name>
                  <operator>.</operator>
                  <name>equals</name>
                </name>
                <argument_list>(<argument>
                    <expr>
                      <name>periodClass</name>
                    </expr>
                  </argument>)</argument_list>
              </call>
            </expr>)</condition>
          <block>{<block_content>
              <decl_stmt>
                <decl>
                  <type>
                    <name>String</name>
                  </type>
                  <name>msg</name>
                  <init>= <expr>
                      <literal type="string">"You are trying to add data where the time "</literal>
                      <operator>+</operator>
                      <literal type="string">"period class is "</literal>
                      <operator>+</operator>
                      <call>
                        <name>
                          <name>periodClass</name>
                          <operator>.</operator>
                          <name>getName</name>
                        </name>
                        <argument_list>()</argument_list>
                      </call>
                      <operator>+</operator>
                      <literal type="string">", but the TimeSeries is expecting an instance of "</literal>
                      <operator>+</operator>
                      <call>
                        <name>
                          <name>this</name>
                          <operator>.</operator>
                          <name>timePeriodClass</name>
                          <operator>.</operator>
                          <name>getName</name>
                        </name>
                        <argument_list>()</argument_list>
                      </call>
                      <operator>+</operator>
                      <literal type="string">"."</literal>
                    </expr>
                  </init>
                </decl>;</decl_stmt>
              <throw>throw <expr>
                  <operator>new</operator>
                  <call>
                    <name>SeriesException</name>
                    <argument_list>(<argument>
                        <expr>
                          <name>msg</name>
                        </expr>
                      </argument>)</argument_list>
                  </call>
                </expr>;</throw>
            </block_content>}</block>
        </if>
      </if_stmt>
      <decl_stmt>
        <decl>
          <type>
            <name>TimeSeriesDataItem</name>
          </type>
          <name>overwritten</name>
          <init>= <expr>
              <literal type="null">null</literal>
            </expr>
          </init>
        </decl>;</decl_stmt>
      <decl_stmt>
        <decl>
          <type>
            <name>int</name>
          </type>
          <name>index</name>
          <init>= <expr>
              <call>
                <name>
                  <name>Collections</name>
                  <operator>.</operator>
                  <name>binarySearch</name>
                </name>
                <argument_list>(<argument>
                    <expr>
                      <name>
                        <name>this</name>
                        <operator>.</operator>
                        <name>data</name>
                      </name>
                    </expr>
                  </argument>, <argument>
                    <expr>
                      <name>item</name>
                    </expr>
                  </argument>)</argument_list>
              </call>
            </expr>
          </init>
        </decl>;</decl_stmt>
      <if_stmt>
        <if>if <condition>(<expr>
              <name>index</name>
              <operator>&gt;=</operator>
              <literal type="number">0</literal>
            </expr>)</condition>
          <block>{<block_content>
              <decl_stmt>
                <decl>
                  <type>
                    <name>TimeSeriesDataItem</name>
                  </type>
                  <name>existing</name>
                  <init>= <expr>
                      <operator>(</operator>
                      <name>TimeSeriesDataItem</name>
                      <operator>)</operator>
                      <call>
                        <name>
                          <name>this</name>
                          <operator>.</operator>
                          <name>data</name>
                          <operator>.</operator>
                          <name>get</name>
                        </name>
                        <argument_list>(<argument>
                            <expr>
                              <name>index</name>
                            </expr>
                          </argument>)</argument_list>
                      </call>
                    </expr>
                  </init>
                </decl>;</decl_stmt>
              <expr_stmt>
                <expr>
                  <name>overwritten</name>
                  <operator>=</operator>
                  <operator>(</operator>
                  <name>TimeSeriesDataItem</name>
                  <operator>)</operator>
                  <call>
                    <name>
                      <name>existing</name>
                      <operator>.</operator>
                      <name>clone</name>
                    </name>
                    <argument_list>()</argument_list>
                  </call>
                </expr>;</expr_stmt>
              <comment type="line">// figure out if we need to iterate through all the y-values</comment>
              <comment type="line">// to find the revised minY / maxY</comment>
              <decl_stmt>
                <decl>
                  <type>
                    <name>boolean</name>
                  </type>
                  <name>iterate</name>
                  <init>= <expr>
                      <literal type="boolean">false</literal>
                    </expr>
                  </init>
                </decl>;</decl_stmt>
              <decl_stmt>
                <decl>
                  <type>
                    <name>Number</name>
                  </type>
                  <name>oldYN</name>
                  <init>= <expr>
                      <call>
                        <name>
                          <name>existing</name>
                          <operator>.</operator>
                          <name>getValue</name>
                        </name>
                        <argument_list>()</argument_list>
                      </call>
                    </expr>
                  </init>
                </decl>;</decl_stmt>
              <decl_stmt>
                <decl>
                  <type>
                    <name>double</name>
                  </type>
                  <name>oldY</name>
                  <init>= <expr>
                      <ternary>
                        <condition>
                          <expr>
                            <name>oldYN</name>
                            <operator>!=</operator>
                            <literal type="null">null</literal>
                          </expr> ?</condition>
                        <then>
                          <expr>
                            <call>
                              <name>
                                <name>oldYN</name>
                                <operator>.</operator>
                                <name>doubleValue</name>
                              </name>
                              <argument_list>()</argument_list>
                            </call>
                          </expr>
                        </then>
                        <else>: <expr>
                            <name>
                              <name>Double</name>
                              <operator>.</operator>
                              <name>NaN</name>
                            </name>
                          </expr>
                        </else>
                      </ternary>
                    </expr>
                  </init>
                </decl>;</decl_stmt>
              <if_stmt>
                <if>if <condition>(<expr>
                      <operator>!</operator>
                      <call>
                        <name>
                          <name>Double</name>
                          <operator>.</operator>
                          <name>isNaN</name>
                        </name>
                        <argument_list>(<argument>
                            <expr>
                              <name>oldY</name>
                            </expr>
                          </argument>)</argument_list>
                      </call>
                    </expr>)</condition>
                  <block>{<block_content>
                      <expr_stmt>
                        <expr>
                          <name>iterate</name>
                          <operator>=</operator>
                          <name>oldY</name>
                          <operator>&lt;=</operator>
                          <name>
                            <name>this</name>
                            <operator>.</operator>
                            <name>minY</name>
                          </name>
                          <operator>||</operator>
                          <name>oldY</name>
                          <operator>&gt;=</operator>
                          <name>
                            <name>this</name>
                            <operator>.</operator>
                            <name>maxY</name>
                          </name>
                        </expr>;</expr_stmt>
                    </block_content>}</block>
                </if>
              </if_stmt>
              <expr_stmt>
                <expr>
                  <call>
                    <name>
                      <name>existing</name>
                      <operator>.</operator>
                      <name>setValue</name>
                    </name>
                    <argument_list>(<argument>
                        <expr>
                          <call>
                            <name>
                              <name>item</name>
                              <operator>.</operator>
                              <name>getValue</name>
                            </name>
                            <argument_list>()</argument_list>
                          </call>
                        </expr>
                      </argument>)</argument_list>
                  </call>
                </expr>;</expr_stmt>
              <if_stmt>
                <if>if <condition>(<expr>
                      <name>iterate</name>
                    </expr>)</condition>
                  <block>{<block_content>
                      <expr_stmt>
                        <expr>
                          <call>
                            <name>updateMinMaxYByIteration</name>
                            <argument_list>()</argument_list>
                          </call>
                        </expr>;</expr_stmt>
                    </block_content>}</block>
                </if>
                <if type="elseif">else if <condition>(<expr>
                      <call>
                        <name>
                          <name>item</name>
                          <operator>.</operator>
                          <name>getValue</name>
                        </name>
                        <argument_list>()</argument_list>
                      </call>
                      <operator>!=</operator>
                      <literal type="null">null</literal>
                    </expr>)</condition>
                  <block>{<block_content>
                      <decl_stmt>
                        <decl>
                          <type>
                            <name>double</name>
                          </type>
                          <name>yy</name>
                          <init>= <expr>
                              <call>
                                <name>
                                  <name>item</name>
                                  <operator>.</operator>
                                  <name>getValue</name>
                                </name>
                                <argument_list>()</argument_list>
                              </call>
                              <operator>.</operator>
                              <call>
                                <name>doubleValue</name>
                                <argument_list>()</argument_list>
                              </call>
                            </expr>
                          </init>
                        </decl>;</decl_stmt>
                      <expr_stmt>
                        <expr>
                          <name>
                            <name>this</name>
                            <operator>.</operator>
                            <name>minY</name>
                          </name>
                          <operator>=</operator>
                          <call>
                            <name>minIgnoreNaN</name>
                            <argument_list>(<argument>
                                <expr>
                                  <name>
                                    <name>this</name>
                                    <operator>.</operator>
                                    <name>minY</name>
                                  </name>
                                </expr>
                              </argument>, <argument>
                                <expr>
                                  <name>yy</name>
                                </expr>
                              </argument>)</argument_list>
                          </call>
                        </expr>;</expr_stmt>
                      <expr_stmt>
                        <expr>
                          <name>
                            <name>this</name>
                            <operator>.</operator>
                            <name>maxY</name>
                          </name>
                          <operator>=</operator>
                          <call>
                            <name>maxIgnoreNaN</name>
                            <argument_list>(<argument>
                                <expr>
                                  <name>
                                    <name>this</name>
                                    <operator>.</operator>
                                    <name>maxY</name>
                                  </name>
                                </expr>
                              </argument>, <argument>
                                <expr>
                                  <name>yy</name>
                                </expr>
                              </argument>)</argument_list>
                          </call>
                        </expr>;</expr_stmt>
                    </block_content>}</block>
                </if>
              </if_stmt>
            </block_content>}</block>
        </if>
        <else>else <block>{<block_content>
              <expr_stmt>
                <expr>
                  <name>item</name>
                  <operator>=</operator>
                  <operator>(</operator>
                  <name>TimeSeriesDataItem</name>
                  <operator>)</operator>
                  <call>
                    <name>
                      <name>item</name>
                      <operator>.</operator>
                      <name>clone</name>
                    </name>
                    <argument_list>()</argument_list>
                  </call>
                </expr>;</expr_stmt>
              <expr_stmt>
                <expr>
                  <call>
                    <name>
                      <name>this</name>
                      <operator>.</operator>
                      <name>data</name>
                      <operator>.</operator>
                      <name>add</name>
                    </name>
                    <argument_list>(<argument>
                        <expr>
                          <operator>-</operator>
                          <name>index</name>
                          <operator>-</operator>
                          <literal type="number">1</literal>
                        </expr>
                      </argument>, <argument>
                        <expr>
                          <name>item</name>
                        </expr>
                      </argument>)</argument_list>
                  </call>
                </expr>;</expr_stmt>
              <expr_stmt>
                <expr>
                  <call>
                    <name>updateBoundsForAddedItem</name>
                    <argument_list>(<argument>
                        <expr>
                          <name>item</name>
                        </expr>
                      </argument>)</argument_list>
                  </call>
                </expr>;</expr_stmt>
              <comment type="line">// check if this addition will exceed the maximum item count...</comment>
              <if_stmt>
                <if>if <condition>(<expr>
                      <call>
                        <name>getItemCount</name>
                        <argument_list>()</argument_list>
                      </call>
                      <operator>&gt;</operator>
                      <name>
                        <name>this</name>
                        <operator>.</operator>
                        <name>maximumItemCount</name>
                      </name>
                    </expr>)</condition>
                  <block>{<block_content>
                      <decl_stmt>
                        <decl>
                          <type>
                            <name>TimeSeriesDataItem</name>
                          </type>
                          <name>d</name>
                          <init>= <expr>
                              <operator>(</operator>
                              <name>TimeSeriesDataItem</name>
                              <operator>)</operator>
                              <call>
                                <name>
                                  <name>this</name>
                                  <operator>.</operator>
                                  <name>data</name>
                                  <operator>.</operator>
                                  <name>remove</name>
                                </name>
                                <argument_list>(<argument>
                                    <expr>
                                      <literal type="number">0</literal>
                                    </expr>
                                  </argument>)</argument_list>
                              </call>
                            </expr>
                          </init>
                        </decl>;</decl_stmt>
                      <expr_stmt>
                        <expr>
                          <call>
                            <name>updateBoundsForRemovedItem</name>
                            <argument_list>(<argument>
                                <expr>
                                  <name>d</name>
                                </expr>
                              </argument>)</argument_list>
                          </call>
                        </expr>;</expr_stmt>
                    </block_content>}</block>
                </if>
              </if_stmt>
            </block_content>}</block>
        </else>
      </if_stmt>
      <expr_stmt>
        <expr>
          <call>
            <name>removeAgedItems</name>
            <argument_list>(<argument>
                <expr>
                  <literal type="boolean">false</literal>
                </expr>
              </argument>)</argument_list>
          </call>
        </expr>;</expr_stmt>
      <comment type="line">// remove old items if necessary, but</comment>
      <comment type="line">// don't notify anyone, because that</comment>
      <comment type="line">// happens next anyway...</comment>
      <expr_stmt>
        <expr>
          <call>
            <name>fireSeriesChanged</name>
            <argument_list>()</argument_list>
          </call>
        </expr>;</expr_stmt>
      <return>return <expr>
          <name>overwritten</name>
        </expr>;</return>
    </block_content>}</block>
</function>
