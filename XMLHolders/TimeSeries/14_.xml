<?xml version='1.0' encoding='utf-8'?>
<function>
  <type>
    <specifier>public</specifier>
    <name>Range</name>
  </type>
  <name>findValueRange</name>
  <parameter_list>(<parameter>
      <decl>
        <type>
          <name>Range</name>
        </type>
        <name>xRange</name>
      </decl>
    </parameter>, <parameter>
      <decl>
        <type>
          <name>TimePeriodAnchor</name>
        </type>
        <name>xAnchor</name>
      </decl>
    </parameter>, <parameter>
      <decl>
        <type>
          <name>Calendar</name>
        </type>
        <name>calendar</name>
      </decl>
    </parameter>)</parameter_list>
  <block>{<block_content>
      <comment type="line">// since the items are ordered, we could be more clever here and avoid</comment>
      <comment type="line">// iterating over all the data</comment>
      <decl_stmt>
        <decl>
          <type>
            <name>double</name>
          </type>
          <name>lowY</name>
          <init>= <expr>
              <name>
                <name>Double</name>
                <operator>.</operator>
                <name>POSITIVE_INFINITY</name>
              </name>
            </expr>
          </init>
        </decl>;</decl_stmt>
      <decl_stmt>
        <decl>
          <type>
            <name>double</name>
          </type>
          <name>highY</name>
          <init>= <expr>
              <name>
                <name>Double</name>
                <operator>.</operator>
                <name>NEGATIVE_INFINITY</name>
              </name>
            </expr>
          </init>
        </decl>;</decl_stmt>
      <for>for <control>(<init>
            <decl>
              <type>
                <name>int</name>
              </type>
              <name>i</name>
              <init>= <expr>
                  <literal type="number">0</literal>
                </expr>
              </init>
            </decl>;</init>
          <condition>
            <expr>
              <name>i</name>
              <operator>&lt;</operator>
              <call>
                <name>
                  <name>this</name>
                  <operator>.</operator>
                  <name>data</name>
                  <operator>.</operator>
                  <name>size</name>
                </name>
                <argument_list>()</argument_list>
              </call>
            </expr>;</condition>
          <incr>
            <expr>
              <name>i</name>
              <operator>++</operator>
            </expr>
          </incr>)</control>
        <block>{<block_content>
            <decl_stmt>
              <decl>
                <type>
                  <name>TimeSeriesDataItem</name>
                </type>
                <name>item</name>
                <init>= <expr>
                    <call>
                      <name>
                        <name>this</name>
                        <operator>.</operator>
                        <name>data</name>
                        <operator>.</operator>
                        <name>get</name>
                      </name>
                      <argument_list>(<argument>
                          <expr>
                            <name>i</name>
                          </expr>
                        </argument>)</argument_list>
                    </call>
                  </expr>
                </init>
              </decl>;</decl_stmt>
            <decl_stmt>
              <decl>
                <type>
                  <name>long</name>
                </type>
                <name>millis</name>
                <init>= <expr>
                    <call>
                      <name>
                        <name>item</name>
                        <operator>.</operator>
                        <name>getPeriod</name>
                      </name>
                      <argument_list>()</argument_list>
                    </call>
                    <operator>.</operator>
                    <call>
                      <name>getMillisecond</name>
                      <argument_list>(<argument>
                          <expr>
                            <name>xAnchor</name>
                          </expr>
                        </argument>, <argument>
                          <expr>
                            <name>calendar</name>
                          </expr>
                        </argument>)</argument_list>
                    </call>
                  </expr>
                </init>
              </decl>;</decl_stmt>
            <if_stmt>
              <if>if <condition>(<expr>
                    <call>
                      <name>
                        <name>xRange</name>
                        <operator>.</operator>
                        <name>contains</name>
                      </name>
                      <argument_list>(<argument>
                          <expr>
                            <name>millis</name>
                          </expr>
                        </argument>)</argument_list>
                    </call>
                  </expr>)</condition>
                <block>{<block_content>
                    <decl_stmt>
                      <decl>
                        <type>
                          <name>Number</name>
                        </type>
                        <name>n</name>
                        <init>= <expr>
                            <call>
                              <name>
                                <name>item</name>
                                <operator>.</operator>
                                <name>getValue</name>
                              </name>
                              <argument_list>()</argument_list>
                            </call>
                          </expr>
                        </init>
                      </decl>;</decl_stmt>
                    <if_stmt>
                      <if>if <condition>(<expr>
                            <name>n</name>
                            <operator>!=</operator>
                            <literal type="null">null</literal>
                          </expr>)</condition>
                        <block>{<block_content>
                            <decl_stmt>
                              <decl>
                                <type>
                                  <name>double</name>
                                </type>
                                <name>v</name>
                                <init>= <expr>
                                    <call>
                                      <name>
                                        <name>n</name>
                                        <operator>.</operator>
                                        <name>doubleValue</name>
                                      </name>
                                      <argument_list>()</argument_list>
                                    </call>
                                  </expr>
                                </init>
                              </decl>;</decl_stmt>
                            <expr_stmt>
                              <expr>
                                <name>lowY</name>
                                <operator>=</operator>
                                <call>
                                  <name>minIgnoreNaN</name>
                                  <argument_list>(<argument>
                                      <expr>
                                        <name>lowY</name>
                                      </expr>
                                    </argument>, <argument>
                                      <expr>
                                        <name>v</name>
                                      </expr>
                                    </argument>)</argument_list>
                                </call>
                              </expr>;</expr_stmt>
                            <expr_stmt>
                              <expr>
                                <name>highY</name>
                                <operator>=</operator>
                                <call>
                                  <name>maxIgnoreNaN</name>
                                  <argument_list>(<argument>
                                      <expr>
                                        <name>highY</name>
                                      </expr>
                                    </argument>, <argument>
                                      <expr>
                                        <name>v</name>
                                      </expr>
                                    </argument>)</argument_list>
                                </call>
                              </expr>;</expr_stmt>
                          </block_content>}</block>
                      </if>
                    </if_stmt>
                  </block_content>}</block>
              </if>
            </if_stmt>
          </block_content>}</block>
      </for>
      <if_stmt>
        <if>if <condition>(<expr>
              <call>
                <name>
                  <name>Double</name>
                  <operator>.</operator>
                  <name>isInfinite</name>
                </name>
                <argument_list>(<argument>
                    <expr>
                      <name>lowY</name>
                    </expr>
                  </argument>)</argument_list>
              </call>
              <operator>&amp;&amp;</operator>
              <call>
                <name>
                  <name>Double</name>
                  <operator>.</operator>
                  <name>isInfinite</name>
                </name>
                <argument_list>(<argument>
                    <expr>
                      <name>highY</name>
                    </expr>
                  </argument>)</argument_list>
              </call>
            </expr>)</condition>
          <block>{<block_content>
              <if_stmt>
                <if>if <condition>(<expr>
                      <name>lowY</name>
                      <operator>&lt;</operator>
                      <name>highY</name>
                    </expr>)</condition>
                  <block>{<block_content>
                      <return>return <expr>
                          <operator>new</operator>
                          <call>
                            <name>Range</name>
                            <argument_list>(<argument>
                                <expr>
                                  <name>lowY</name>
                                </expr>
                              </argument>, <argument>
                                <expr>
                                  <name>highY</name>
                                </expr>
                              </argument>)</argument_list>
                          </call>
                        </expr>;</return>
                    </block_content>}</block>
                </if>
                <else>else <block>{<block_content>
                      <return>return <expr>
                          <operator>new</operator>
                          <call>
                            <name>Range</name>
                            <argument_list>(<argument>
                                <expr>
                                  <name>
                                    <name>Double</name>
                                    <operator>.</operator>
                                    <name>NaN</name>
                                  </name>
                                </expr>
                              </argument>, <argument>
                                <expr>
                                  <name>
                                    <name>Double</name>
                                    <operator>.</operator>
                                    <name>NaN</name>
                                  </name>
                                </expr>
                              </argument>)</argument_list>
                          </call>
                        </expr>;</return>
                    </block_content>}</block>
                </else>
              </if_stmt>
            </block_content>}</block>
        </if>
      </if_stmt>
      <return>return <expr>
          <operator>new</operator>
          <call>
            <name>Range</name>
            <argument_list>(<argument>
                <expr>
                  <name>lowY</name>
                </expr>
              </argument>, <argument>
                <expr>
                  <name>highY</name>
                </expr>
              </argument>)</argument_list>
          </call>
        </expr>;</return>
    </block_content>}</block>
</function>
