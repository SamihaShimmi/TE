<?xml version='1.0' encoding='utf-8'?>
<function>
  <annotation>@<name>Override</name>
  </annotation>
  <type>
    <specifier>public</specifier>
    <name>Range</name>
  </type>
  <name>getDomainBounds</name>
  <parameter_list>(<parameter>
      <decl>
        <type>
          <name>boolean</name>
        </type>
        <name>includeInterval</name>
      </decl>
    </parameter>)</parameter_list>
  <block>{<block_content>
      <decl_stmt>
        <decl>
          <type>
            <name>Range</name>
          </type>
          <name>result</name>
          <init>= <expr>
              <literal type="null">null</literal>
            </expr>
          </init>
        </decl>;</decl_stmt>
      <for>for <control>(<init>
            <decl>
              <type>
                <name>
                  <name>TimeSeries</name>
                  <argument_list type="generic">&lt;<argument>
                      <name>S</name>
                    </argument>&gt;</argument_list>
                </name>
              </type>
              <name>series</name>
              <range>: <expr>
                  <name>
                    <name>this</name>
                    <operator>.</operator>
                    <name>data</name>
                  </name>
                </expr>
              </range>
            </decl>
          </init>)</control>
        <block>{<block_content>
            <decl_stmt>
              <decl>
                <type>
                  <name>int</name>
                </type>
                <name>count</name>
                <init>= <expr>
                    <call>
                      <name>
                        <name>series</name>
                        <operator>.</operator>
                        <name>getItemCount</name>
                      </name>
                      <argument_list>()</argument_list>
                    </call>
                  </expr>
                </init>
              </decl>;</decl_stmt>
            <if_stmt>
              <if>if <condition>(<expr>
                    <name>count</name>
                    <operator>&gt;</operator>
                    <literal type="number">0</literal>
                  </expr>)</condition>
                <block>{<block_content>
                    <decl_stmt>
                      <decl>
                        <type>
                          <name>RegularTimePeriod</name>
                        </type>
                        <name>start</name>
                        <init>= <expr>
                            <call>
                              <name>
                                <name>series</name>
                                <operator>.</operator>
                                <name>getTimePeriod</name>
                              </name>
                              <argument_list>(<argument>
                                  <expr>
                                    <literal type="number">0</literal>
                                  </expr>
                                </argument>)</argument_list>
                            </call>
                          </expr>
                        </init>
                      </decl>;</decl_stmt>
                    <decl_stmt>
                      <decl>
                        <type>
                          <name>RegularTimePeriod</name>
                        </type>
                        <name>end</name>
                        <init>= <expr>
                            <call>
                              <name>
                                <name>series</name>
                                <operator>.</operator>
                                <name>getTimePeriod</name>
                              </name>
                              <argument_list>(<argument>
                                  <expr>
                                    <name>count</name>
                                    <operator>-</operator>
                                    <literal type="number">1</literal>
                                  </expr>
                                </argument>)</argument_list>
                            </call>
                          </expr>
                        </init>
                      </decl>;</decl_stmt>
                    <decl_stmt>
                      <decl>
                        <type>
                          <name>Range</name>
                        </type>
                        <name>temp</name>
                      </decl>;</decl_stmt>
                    <if_stmt>
                      <if>if <condition>(<expr>
                            <operator>!</operator>
                            <name>includeInterval</name>
                          </expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt>
                              <expr>
                                <name>temp</name>
                                <operator>=</operator>
                                <operator>new</operator>
                                <call>
                                  <name>Range</name>
                                  <argument_list>(<argument>
                                      <expr>
                                        <call>
                                          <name>getX</name>
                                          <argument_list>(<argument>
                                              <expr>
                                                <name>start</name>
                                              </expr>
                                            </argument>)</argument_list>
                                        </call>
                                      </expr>
                                    </argument>, <argument>
                                      <expr>
                                        <call>
                                          <name>getX</name>
                                          <argument_list>(<argument>
                                              <expr>
                                                <name>end</name>
                                              </expr>
                                            </argument>)</argument_list>
                                        </call>
                                      </expr>
                                    </argument>)</argument_list>
                                </call>
                              </expr>;</expr_stmt>
                          </block_content>}</block>
                      </if>
                      <else>else <block>{<block_content>
                            <expr_stmt>
                              <expr>
                                <name>temp</name>
                                <operator>=</operator>
                                <operator>new</operator>
                                <call>
                                  <name>Range</name>
                                  <argument_list>(
                            <argument>
                                      <expr>
                                        <call>
                                          <name>
                                            <name>start</name>
                                            <operator>.</operator>
                                            <name>getFirstMillisecond</name>
                                          </name>
                                          <argument_list>(<argument>
                                              <expr>
                                                <name>
                                                  <name>this</name>
                                                  <operator>.</operator>
                                                  <name>workingCalendar</name>
                                                </name>
                                              </expr>
                                            </argument>)</argument_list>
                                        </call>
                                      </expr>
                                    </argument>,
                            <argument>
                                      <expr>
                                        <call>
                                          <name>
                                            <name>end</name>
                                            <operator>.</operator>
                                            <name>getLastMillisecond</name>
                                          </name>
                                          <argument_list>(<argument>
                                              <expr>
                                                <name>
                                                  <name>this</name>
                                                  <operator>.</operator>
                                                  <name>workingCalendar</name>
                                                </name>
                                              </expr>
                                            </argument>)</argument_list>
                                        </call>
                                      </expr>
                                    </argument>)</argument_list>
                                </call>
                              </expr>;</expr_stmt>
                          </block_content>}</block>
                      </else>
                    </if_stmt>
                    <expr_stmt>
                      <expr>
                        <name>result</name>
                        <operator>=</operator>
                        <call>
                          <name>
                            <name>Range</name>
                            <operator>.</operator>
                            <name>combine</name>
                          </name>
                          <argument_list>(<argument>
                              <expr>
                                <name>result</name>
                              </expr>
                            </argument>, <argument>
                              <expr>
                                <name>temp</name>
                              </expr>
                            </argument>)</argument_list>
                        </call>
                      </expr>;</expr_stmt>
                  </block_content>}</block>
              </if>
            </if_stmt>
          </block_content>}</block>
      </for>
      <return>return <expr>
          <name>result</name>
        </expr>;</return>
    </block_content>}</block>
</function>
