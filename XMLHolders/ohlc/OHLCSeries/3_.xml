<?xml version='1.0' encoding='utf-8'?>
<function>
  <type>
    <specifier>public</specifier>
    <name>void</name>
  </type>
  <name>add</name>
  <parameter_list>(<parameter>
      <decl>
        <type>
          <name>RegularTimePeriod</name>
        </type>
        <name>period</name>
      </decl>
    </parameter>, <parameter>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>open</name>
      </decl>
    </parameter>, <parameter>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>high</name>
      </decl>
    </parameter>,
            <parameter>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>low</name>
      </decl>
    </parameter>, <parameter>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>close</name>
      </decl>
    </parameter>)</parameter_list>
  <block>{<block_content>
      <if_stmt>
        <if>if <condition>(<expr>
              <call>
                <name>getItemCount</name>
                <argument_list>()</argument_list>
              </call>
              <operator>&gt;</operator>
              <literal type="number">0</literal>
            </expr>)</condition>
          <block>{<block_content>
              <decl_stmt>
                <decl>
                  <type>
                    <name>OHLCItem</name>
                  </type>
                  <name>item0</name>
                  <init>= <expr>
                      <operator>(</operator>
                      <name>OHLCItem</name>
                      <operator>)</operator>
                      <call>
                        <name>
                          <name>this</name>
                          <operator>.</operator>
                          <name>getDataItem</name>
                        </name>
                        <argument_list>(<argument>
                            <expr>
                              <literal type="number">0</literal>
                            </expr>
                          </argument>)</argument_list>
                      </call>
                    </expr>
                  </init>
                </decl>;</decl_stmt>
              <if_stmt>
                <if>if <condition>(<expr>
                      <operator>!</operator>
                      <call>
                        <name>
                          <name>period</name>
                          <operator>.</operator>
                          <name>getClass</name>
                        </name>
                        <argument_list>()</argument_list>
                      </call>
                      <operator>.</operator>
                      <call>
                        <name>equals</name>
                        <argument_list>(<argument>
                            <expr>
                              <call>
                                <name>
                                  <name>item0</name>
                                  <operator>.</operator>
                                  <name>getPeriod</name>
                                </name>
                                <argument_list>()</argument_list>
                              </call>
                              <operator>.</operator>
                              <call>
                                <name>getClass</name>
                                <argument_list>()</argument_list>
                              </call>
                            </expr>
                          </argument>)</argument_list>
                      </call>
                    </expr>)</condition>
                  <block>{<block_content>
                      <throw>throw <expr>
                          <operator>new</operator>
                          <call>
                            <name>IllegalArgumentException</name>
                            <argument_list>(
                        <argument>
                                <expr>
                                  <literal type="string">"Can't mix RegularTimePeriod class types."</literal>
                                </expr>
                              </argument>)</argument_list>
                          </call>
                        </expr>;</throw>
                    </block_content>}</block>
                </if>
              </if_stmt>
            </block_content>}</block>
        </if>
      </if_stmt>
      <expr_stmt>
        <expr>
          <call>
            <name>
              <name>super</name>
              <operator>.</operator>
              <name>add</name>
            </name>
            <argument_list>(<argument>
                <expr>
                  <operator>new</operator>
                  <call>
                    <name>OHLCItem</name>
                    <argument_list>(<argument>
                        <expr>
                          <name>period</name>
                        </expr>
                      </argument>, <argument>
                        <expr>
                          <name>open</name>
                        </expr>
                      </argument>, <argument>
                        <expr>
                          <name>high</name>
                        </expr>
                      </argument>, <argument>
                        <expr>
                          <name>low</name>
                        </expr>
                      </argument>, <argument>
                        <expr>
                          <name>close</name>
                        </expr>
                      </argument>)</argument_list>
                  </call>
                </expr>
              </argument>, <argument>
                <expr>
                  <literal type="boolean">true</literal>
                </expr>
              </argument>)</argument_list>
          </call>
        </expr>;</expr_stmt>
    </block_content>}</block>
</function>
