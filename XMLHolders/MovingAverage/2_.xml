<?xml version='1.0' encoding='utf-8'?>
<function>
  <type>
    <specifier>public</specifier>
    <specifier>static</specifier>
    <parameter_list type="generic">&lt;<parameter>
        <name>S</name>
        <extends>extends <name>
            <name>Comparable</name>
            <argument_list type="generic">&lt;<argument>
                <name>S</name>
              </argument>&gt;</argument_list>
          </name>
        </extends>
      </parameter>&gt;</parameter_list>
    <name>
      <name>TimeSeries</name>
      <argument_list type="generic">&lt;<argument>
          <name>S</name>
        </argument>&gt;</argument_list>
    </name>
  </type>
  <name>createMovingAverage</name>
  <parameter_list>(
            <parameter>
      <decl>
        <type>
          <name>
            <name>TimeSeries</name>
            <argument_list type="generic">&lt;<argument>
                <name>S</name>
              </argument>&gt;</argument_list>
          </name>
        </type>
        <name>source</name>
      </decl>
    </parameter>, <parameter>
      <decl>
        <type>
          <name>S</name>
        </type>
        <name>name</name>
      </decl>
    </parameter>, <parameter>
      <decl>
        <type>
          <name>int</name>
        </type>
        <name>periodCount</name>
      </decl>
    </parameter>, <parameter>
      <decl>
        <type>
          <name>int</name>
        </type>
        <name>skip</name>
      </decl>
    </parameter>)</parameter_list>
  <block>{<block_content>
      <expr_stmt>
        <expr>
          <call>
            <name>
              <name>Args</name>
              <operator>.</operator>
              <name>nullNotPermitted</name>
            </name>
            <argument_list>(<argument>
                <expr>
                  <name>source</name>
                </expr>
              </argument>, <argument>
                <expr>
                  <literal type="string">"source"</literal>
                </expr>
              </argument>)</argument_list>
          </call>
        </expr>;</expr_stmt>
      <if_stmt>
        <if>if <condition>(<expr>
              <name>periodCount</name>
              <operator>&lt;</operator>
              <literal type="number">1</literal>
            </expr>)</condition>
          <block>{<block_content>
              <throw>throw <expr>
                  <operator>new</operator>
                  <call>
                    <name>IllegalArgumentException</name>
                    <argument_list>(<argument>
                        <expr>
                          <literal type="string">"periodCount must be greater "</literal>
                          <operator>+</operator>
                          <literal type="string">"than or equal to 1."</literal>
                        </expr>
                      </argument>)</argument_list>
                  </call>
                </expr>;</throw>
            </block_content>}</block>
        </if>
      </if_stmt>
      <decl_stmt>
        <decl>
          <type>
            <name>
              <name>TimeSeries</name>
              <argument_list type="generic">&lt;<argument>
                  <name>S</name>
                </argument>&gt;</argument_list>
            </name>
          </type>
          <name>result</name>
          <init>= <expr>
              <operator>new</operator>
              <call>
                <name>
                  <name>TimeSeries</name>
                  <argument_list type="generic">&lt;&gt;</argument_list>
                </name>
                <argument_list>(<argument>
                    <expr>
                      <name>name</name>
                    </expr>
                  </argument>)</argument_list>
              </call>
            </expr>
          </init>
        </decl>;</decl_stmt>
      <if_stmt>
        <if>if <condition>(<expr>
              <call>
                <name>
                  <name>source</name>
                  <operator>.</operator>
                  <name>getItemCount</name>
                </name>
                <argument_list>()</argument_list>
              </call>
              <operator>&gt;</operator>
              <literal type="number">0</literal>
            </expr>)</condition>
          <block>{<block_content>
              <comment type="line">// if the initial averaging period is to be excluded, then</comment>
              <comment type="line">// calculate the index of the</comment>
              <comment type="line">// first data item to have an average calculated...</comment>
              <decl_stmt>
                <decl>
                  <type>
                    <name>long</name>
                  </type>
                  <name>firstSerial</name>
                  <init>= <expr>
                      <call>
                        <name>
                          <name>source</name>
                          <operator>.</operator>
                          <name>getTimePeriod</name>
                        </name>
                        <argument_list>(<argument>
                            <expr>
                              <literal type="number">0</literal>
                            </expr>
                          </argument>)</argument_list>
                      </call>
                      <operator>.</operator>
                      <call>
                        <name>getSerialIndex</name>
                        <argument_list>()</argument_list>
                      </call>
                      <operator>+</operator>
                      <name>skip</name>
                    </expr>
                  </init>
                </decl>;</decl_stmt>
              <for>for <control>(<init>
                    <decl>
                      <type>
                        <name>int</name>
                      </type>
                      <name>i</name>
                      <init>= <expr>
                          <call>
                            <name>
                              <name>source</name>
                              <operator>.</operator>
                              <name>getItemCount</name>
                            </name>
                            <argument_list>()</argument_list>
                          </call>
                          <operator>-</operator>
                          <literal type="number">1</literal>
                        </expr>
                      </init>
                    </decl>;</init>
                  <condition>
                    <expr>
                      <name>i</name>
                      <operator>&gt;=</operator>
                      <literal type="number">0</literal>
                    </expr>;</condition>
                  <incr>
                    <expr>
                      <name>i</name>
                      <operator>--</operator>
                    </expr>
                  </incr>)</control>
                <block>{<block_content>
                    <comment type="line">// get the current data item...</comment>
                    <decl_stmt>
                      <decl>
                        <type>
                          <name>RegularTimePeriod</name>
                        </type>
                        <name>period</name>
                        <init>= <expr>
                            <call>
                              <name>
                                <name>source</name>
                                <operator>.</operator>
                                <name>getTimePeriod</name>
                              </name>
                              <argument_list>(<argument>
                                  <expr>
                                    <name>i</name>
                                  </expr>
                                </argument>)</argument_list>
                            </call>
                          </expr>
                        </init>
                      </decl>;</decl_stmt>
                    <decl_stmt>
                      <decl>
                        <type>
                          <name>long</name>
                        </type>
                        <name>serial</name>
                        <init>= <expr>
                            <call>
                              <name>
                                <name>period</name>
                                <operator>.</operator>
                                <name>getSerialIndex</name>
                              </name>
                              <argument_list>()</argument_list>
                            </call>
                          </expr>
                        </init>
                      </decl>;</decl_stmt>
                    <if_stmt>
                      <if>if <condition>(<expr>
                            <name>serial</name>
                            <operator>&gt;=</operator>
                            <name>firstSerial</name>
                          </expr>)</condition>
                        <block>{<block_content>
                            <comment type="line">// work out the average for the earlier values...</comment>
                            <decl_stmt>
                              <decl>
                                <type>
                                  <name>int</name>
                                </type>
                                <name>n</name>
                                <init>= <expr>
                                    <literal type="number">0</literal>
                                  </expr>
                                </init>
                              </decl>;</decl_stmt>
                            <decl_stmt>
                              <decl>
                                <type>
                                  <name>double</name>
                                </type>
                                <name>sum</name>
                                <init>= <expr>
                                    <literal type="number">0.0</literal>
                                  </expr>
                                </init>
                              </decl>;</decl_stmt>
                            <decl_stmt>
                              <decl>
                                <type>
                                  <name>long</name>
                                </type>
                                <name>serialLimit</name>
                                <init>= <expr>
                                    <call>
                                      <name>
                                        <name>period</name>
                                        <operator>.</operator>
                                        <name>getSerialIndex</name>
                                      </name>
                                      <argument_list>()</argument_list>
                                    </call>
                                    <operator>-</operator>
                                    <name>periodCount</name>
                                  </expr>
                                </init>
                              </decl>;</decl_stmt>
                            <decl_stmt>
                              <decl>
                                <type>
                                  <name>int</name>
                                </type>
                                <name>offset</name>
                                <init>= <expr>
                                    <literal type="number">0</literal>
                                  </expr>
                                </init>
                              </decl>;</decl_stmt>
                            <decl_stmt>
                              <decl>
                                <type>
                                  <name>boolean</name>
                                </type>
                                <name>finished</name>
                                <init>= <expr>
                                    <literal type="boolean">false</literal>
                                  </expr>
                                </init>
                              </decl>;</decl_stmt>
                            <while>while <condition>(<expr>
                                  <operator>(</operator>
                                  <name>offset</name>
                                  <operator>&lt;</operator>
                                  <name>periodCount</name>
                                  <operator>)</operator>
                                  <operator>&amp;&amp;</operator>
                                  <operator>(</operator>
                                  <operator>!</operator>
                                  <name>finished</name>
                                  <operator>)</operator>
                                </expr>)</condition>
                              <block>{<block_content>
                                  <if_stmt>
                                    <if>if <condition>(<expr>
                                          <operator>(</operator>
                                          <name>i</name>
                                          <operator>-</operator>
                                          <name>offset</name>
                                          <operator>)</operator>
                                          <operator>&gt;=</operator>
                                          <literal type="number">0</literal>
                                        </expr>)</condition>
                                      <block>{<block_content>
                                          <decl_stmt>
                                            <decl>
                                              <type>
                                                <name>TimeSeriesDataItem</name>
                                              </type>
                                              <name>item</name>
                                              <init>= <expr>
                                                  <call>
                                                    <name>
                                                      <name>source</name>
                                                      <operator>.</operator>
                                                      <name>getRawDataItem</name>
                                                    </name>
                                                    <argument_list>(
                                    <argument>
                                                        <expr>
                                                          <name>i</name>
                                                          <operator>-</operator>
                                                          <name>offset</name>
                                                        </expr>
                                                      </argument>)</argument_list>
                                                  </call>
                                                </expr>
                                              </init>
                                            </decl>;</decl_stmt>
                                          <decl_stmt>
                                            <decl>
                                              <type>
                                                <name>RegularTimePeriod</name>
                                              </type>
                                              <name>p</name>
                                              <init>= <expr>
                                                  <call>
                                                    <name>
                                                      <name>item</name>
                                                      <operator>.</operator>
                                                      <name>getPeriod</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                  </call>
                                                </expr>
                                              </init>
                                            </decl>;</decl_stmt>
                                          <decl_stmt>
                                            <decl>
                                              <type>
                                                <name>Number</name>
                                              </type>
                                              <name>v</name>
                                              <init>= <expr>
                                                  <call>
                                                    <name>
                                                      <name>item</name>
                                                      <operator>.</operator>
                                                      <name>getValue</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                  </call>
                                                </expr>
                                              </init>
                                            </decl>;</decl_stmt>
                                          <decl_stmt>
                                            <decl>
                                              <type>
                                                <name>long</name>
                                              </type>
                                              <name>currentIndex</name>
                                              <init>= <expr>
                                                  <call>
                                                    <name>
                                                      <name>p</name>
                                                      <operator>.</operator>
                                                      <name>getSerialIndex</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                  </call>
                                                </expr>
                                              </init>
                                            </decl>;</decl_stmt>
                                          <if_stmt>
                                            <if>if <condition>(<expr>
                                                  <name>currentIndex</name>
                                                  <operator>&gt;</operator>
                                                  <name>serialLimit</name>
                                                </expr>)</condition>
                                              <block>{<block_content>
                                                  <if_stmt>
                                                    <if>if <condition>(<expr>
                                                          <name>v</name>
                                                          <operator>!=</operator>
                                                          <literal type="null">null</literal>
                                                        </expr>)</condition>
                                                      <block>{<block_content>
                                                          <expr_stmt>
                                                            <expr>
                                                              <name>sum</name>
                                                              <operator>=</operator>
                                                              <name>sum</name>
                                                              <operator>+</operator>
                                                              <call>
                                                                <name>
                                                                  <name>v</name>
                                                                  <operator>.</operator>
                                                                  <name>doubleValue</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                              </call>
                                                            </expr>;</expr_stmt>
                                                          <expr_stmt>
                                                            <expr>
                                                              <name>n</name>
                                                              <operator>=</operator>
                                                              <name>n</name>
                                                              <operator>+</operator>
                                                              <literal type="number">1</literal>
                                                            </expr>;</expr_stmt>
                                                        </block_content>}</block>
                                                    </if>
                                                  </if_stmt>
                                                </block_content>}</block>
                                            </if>
                                            <else>else <block>{<block_content>
                                                  <expr_stmt>
                                                    <expr>
                                                      <name>finished</name>
                                                      <operator>=</operator>
                                                      <literal type="boolean">true</literal>
                                                    </expr>;</expr_stmt>
                                                </block_content>}</block>
                                            </else>
                                          </if_stmt>
                                        </block_content>}</block>
                                    </if>
                                  </if_stmt>
                                  <expr_stmt>
                                    <expr>
                                      <name>offset</name>
                                      <operator>=</operator>
                                      <name>offset</name>
                                      <operator>+</operator>
                                      <literal type="number">1</literal>
                                    </expr>;</expr_stmt>
                                </block_content>}</block>
                            </while>
                            <if_stmt>
                              <if>if <condition>(<expr>
                                    <name>n</name>
                                    <operator>&gt;</operator>
                                    <literal type="number">0</literal>
                                  </expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt>
                                      <expr>
                                        <call>
                                          <name>
                                            <name>result</name>
                                            <operator>.</operator>
                                            <name>add</name>
                                          </name>
                                          <argument_list>(<argument>
                                              <expr>
                                                <name>period</name>
                                              </expr>
                                            </argument>, <argument>
                                              <expr>
                                                <name>sum</name>
                                                <operator>/</operator>
                                                <name>n</name>
                                              </expr>
                                            </argument>)</argument_list>
                                        </call>
                                      </expr>;</expr_stmt>
                                  </block_content>}</block>
                              </if>
                              <else>else <block>{<block_content>
                                    <expr_stmt>
                                      <expr>
                                        <call>
                                          <name>
                                            <name>result</name>
                                            <operator>.</operator>
                                            <name>add</name>
                                          </name>
                                          <argument_list>(<argument>
                                              <expr>
                                                <name>period</name>
                                              </expr>
                                            </argument>, <argument>
                                              <expr>
                                                <literal type="null">null</literal>
                                              </expr>
                                            </argument>)</argument_list>
                                        </call>
                                      </expr>;</expr_stmt>
                                  </block_content>}</block>
                              </else>
                            </if_stmt>
                          </block_content>}</block>
                      </if>
                    </if_stmt>
                  </block_content>}</block>
              </for>
            </block_content>}</block>
        </if>
      </if_stmt>
      <return>return <expr>
          <name>result</name>
        </expr>;</return>
    </block_content>}</block>
</function>
