<?xml version='1.0' encoding='utf-8'?>
<function>
  <annotation>@<name>Override</name>
  </annotation>
  <type>
    <specifier>public</specifier>
    <name>int</name>
  </type>
  <name>compareTo</name>
  <parameter_list>(<parameter>
      <decl>
        <type>
          <name>Object</name>
        </type>
        <name>obj</name>
      </decl>
    </parameter>)</parameter_list>
  <block>{<block_content>
      <decl_stmt>
        <decl>
          <type>
            <name>TimePeriod</name>
          </type>
          <name>that</name>
          <init>= <expr>
              <operator>(</operator>
              <name>TimePeriod</name>
              <operator>)</operator>
              <name>obj</name>
            </expr>
          </init>
        </decl>;</decl_stmt>
      <decl_stmt>
        <decl>
          <type>
            <name>long</name>
          </type>
          <name>t0</name>
          <init>= <expr>
              <call>
                <name>getStart</name>
                <argument_list>()</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>getTime</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </init>
        </decl>;</decl_stmt>
      <decl_stmt>
        <decl>
          <type>
            <name>long</name>
          </type>
          <name>t1</name>
          <init>= <expr>
              <call>
                <name>getEnd</name>
                <argument_list>()</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>getTime</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </init>
        </decl>;</decl_stmt>
      <decl_stmt>
        <decl>
          <type>
            <name>long</name>
          </type>
          <name>m0</name>
          <init>= <expr>
              <name>t0</name>
              <operator>+</operator>
              <operator>(</operator>
              <name>t1</name>
              <operator>-</operator>
              <name>t0</name>
              <operator>)</operator>
              <operator>/</operator>
              <literal type="number">2L</literal>
            </expr>
          </init>
        </decl>;</decl_stmt>
      <decl_stmt>
        <decl>
          <type>
            <name>long</name>
          </type>
          <name>t2</name>
          <init>= <expr>
              <call>
                <name>
                  <name>that</name>
                  <operator>.</operator>
                  <name>getStart</name>
                </name>
                <argument_list>()</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>getTime</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </init>
        </decl>;</decl_stmt>
      <decl_stmt>
        <decl>
          <type>
            <name>long</name>
          </type>
          <name>t3</name>
          <init>= <expr>
              <call>
                <name>
                  <name>that</name>
                  <operator>.</operator>
                  <name>getEnd</name>
                </name>
                <argument_list>()</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>getTime</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </init>
        </decl>;</decl_stmt>
      <decl_stmt>
        <decl>
          <type>
            <name>long</name>
          </type>
          <name>m1</name>
          <init>= <expr>
              <name>t2</name>
              <operator>+</operator>
              <operator>(</operator>
              <name>t3</name>
              <operator>-</operator>
              <name>t2</name>
              <operator>)</operator>
              <operator>/</operator>
              <literal type="number">2L</literal>
            </expr>
          </init>
        </decl>;</decl_stmt>
      <if_stmt>
        <if>if <condition>(<expr>
              <name>m0</name>
              <operator>&lt;</operator>
              <name>m1</name>
            </expr>)</condition>
          <block>{<block_content>
              <return>return <expr>
                  <operator>-</operator>
                  <literal type="number">1</literal>
                </expr>;</return>
            </block_content>}</block>
        </if>
        <if type="elseif">else if <condition>(<expr>
              <name>m0</name>
              <operator>&gt;</operator>
              <name>m1</name>
            </expr>)</condition>
          <block>{<block_content>
              <return>return <expr>
                  <literal type="number">1</literal>
                </expr>;</return>
            </block_content>}</block>
        </if>
        <else>else <block>{<block_content>
              <if_stmt>
                <if>if <condition>(<expr>
                      <name>t0</name>
                      <operator>&lt;</operator>
                      <name>t2</name>
                    </expr>)</condition>
                  <block>{<block_content>
                      <return>return <expr>
                          <operator>-</operator>
                          <literal type="number">1</literal>
                        </expr>;</return>
                    </block_content>}</block>
                </if>
                <if type="elseif">else if <condition>(<expr>
                      <name>t0</name>
                      <operator>&gt;</operator>
                      <name>t2</name>
                    </expr>)</condition>
                  <block>{<block_content>
                      <return>return <expr>
                          <literal type="number">1</literal>
                        </expr>;</return>
                    </block_content>}</block>
                </if>
                <else>else <block>{<block_content>
                      <if_stmt>
                        <if>if <condition>(<expr>
                              <name>t1</name>
                              <operator>&lt;</operator>
                              <name>t3</name>
                            </expr>)</condition>
                          <block>{<block_content>
                              <return>return <expr>
                                  <operator>-</operator>
                                  <literal type="number">1</literal>
                                </expr>;</return>
                            </block_content>}</block>
                        </if>
                        <if type="elseif">else if <condition>(<expr>
                              <name>t1</name>
                              <operator>&gt;</operator>
                              <name>t3</name>
                            </expr>)</condition>
                          <block>{<block_content>
                              <return>return <expr>
                                  <literal type="number">1</literal>
                                </expr>;</return>
                            </block_content>}</block>
                        </if>
                        <else>else <block>{<block_content>
                              <return>return <expr>
                                  <literal type="number">0</literal>
                                </expr>;</return>
                            </block_content>}</block>
                        </else>
                      </if_stmt>
                    </block_content>}</block>
                </else>
              </if_stmt>
            </block_content>}</block>
        </else>
      </if_stmt>
    </block_content>}</block>
</function>
